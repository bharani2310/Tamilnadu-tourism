{"ast":null,"code":"var _jsxFileName = \"E:\\\\Final year Project\\\\harmony-in-diversity\\\\frontend\\\\src\\\\pages\\\\Gallery.jsx\",\n  _s = $RefreshSig$();\n// Gallery.js\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Link, useParams } from 'react-router-dom';\nimport useFetch from '../hooks/useFetch';\nimport { BASE_URL } from '../utils/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GenreCards = _ref => {\n  let {\n    genres\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: genres.map((genre, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-3 mb-3\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/gallery/${genre}`,\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"card-title\",\n            children: genre\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n_c = GenreCards;\nconst Gallery = () => {\n  const genres = ['Action', 'Adventure', 'Comedy', 'Drama']; // Example genres\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/gallery\",\n        children: /*#__PURE__*/_jsxDEV(GenreCards, {\n          genres: genres\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), genres.map((genre, index) => /*#__PURE__*/_jsxDEV(Route, {\n        path: `/gallery/${genre}`,\n        children: /*#__PURE__*/_jsxDEV(GenreImages, {\n          genre: genre\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Gallery;\nconst GenreImages = _ref2 => {\n  _s();\n  let {\n    genre\n  } = _ref2;\n  const {\n    data: images,\n    error,\n    loading\n  } = useFetch(`${BASE_URL}/gallery?genre=${genre}`);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-3 mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: image.url,\n          className: \"card-img-top\",\n          alt: image.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"card-title\",\n            children: image.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(GenreImages, \"VKUaOMThoFkjEmihVN8B4CVpMac=\", false, function () {\n  return [useFetch];\n});\n_c3 = GenreImages;\nexport default Gallery;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GenreCards\");\n$RefreshReg$(_c2, \"Gallery\");\n$RefreshReg$(_c3, \"GenreImages\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Route","Link","useParams","useFetch","BASE_URL","GenreCards","genres","map","genre","index","Gallery","GenreImages","data","images","error","loading","image","url","title"],"sources":["E:/Final year Project/harmony-in-diversity/frontend/src/pages/Gallery.jsx"],"sourcesContent":["// Gallery.js\r\nimport React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Link, useParams } from 'react-router-dom';\r\nimport useFetch from '../hooks/useFetch';\r\nimport { BASE_URL } from '../utils/config';\r\n\r\nconst GenreCards = ({ genres }) => {\r\n    return (\r\n        <div className=\"row\">\r\n            {genres.map((genre, index) => (\r\n                <div className=\"col-md-3 mb-3\" key={index}>\r\n                    <Link to={`/gallery/${genre}`} className=\"card\">\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{genre}</h5>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Gallery = () => {\r\n    const genres = ['Action', 'Adventure', 'Comedy', 'Drama']; // Example genres\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"container\">\r\n                <Route exact path=\"/gallery\">\r\n                    <GenreCards genres={genres} />\r\n                </Route>\r\n                {genres.map((genre, index) => (\r\n                    <Route key={index} path={`/gallery/${genre}`}>\r\n                        <GenreImages genre={genre} />\r\n                    </Route>\r\n                ))}\r\n            </div>\r\n        </Router>\r\n    );\r\n};\r\n\r\nconst GenreImages = ({ genre }) => {\r\n    const { data: images, error, loading } = useFetch(`${BASE_URL}/gallery?genre=${genre}`);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {images.map((image, index) => (\r\n                <div className=\"col-md-3 mb-3\" key={index}>\r\n                    <div className=\"card\">\r\n                        <img src={image.url} className=\"card-img-top\" alt={image.title} />\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{image.title}</h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Gallery;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}